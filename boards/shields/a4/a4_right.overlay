
#include <dt-bindings/zmk/matrix_transform.h>
#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include "layouts.dtsi"

/ {
    chosen {
        zmk,physical-layout = &physical_layout0;
    };

    default_transform: keymap_transform_0 {
        compatible = "zmk,matrix-transform";
        columns = <14>;
        rows = <5>;
        map = <
            RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5) RC(0,6) RC(0,7) RC(0,8) RC(0,9) RC(0,10) RC(0,11) RC(0,12) RC(0,13)
			RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5) RC(1,6) RC(1,7) RC(1,8) RC(1,9) RC(1,10) RC(1,11) RC(1,12) RC(1,13)
			RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5) RC(2,6) RC(2,7) RC(2,8) RC(2,9) RC(2,10) RC(2,11) RC(2,12) RC(2,13)
			RC(3,0) RC(3,1) RC(3,2) RC(3,3) RC(3,4) RC(3,5) RC(3,8) RC(3,9) RC(3,10) RC(3,11) RC(3,12) RC(3,13)
			RC(4,0) RC(4,4) RC(4,5) RC(4,6) RC(4,7) RC(4,8) RC(4,9) RC(4,13)
        >;
		col-offset = <7>;
    };

    kscan0: kscan {
        compatible = "zmk,kscan-gpio-matrix";
        wakeup-source;

        diode-direction = "col2row";
        row-gpios
            = <&akdk_d 6 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
			,<&akdk_d 4 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
			,<&akdk_d 3 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
			,<&akdk_d 2 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
			,<&akdk_d 1 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            ;
        col-gpios
            = <&akdk_d 16 GPIO_ACTIVE_HIGH>
			,<&akdk_d 15 GPIO_ACTIVE_HIGH>
			,<&akdk_d 14 GPIO_ACTIVE_HIGH>
			,<&akdk_d 13 GPIO_ACTIVE_HIGH>
			,<&akdk_d 12 GPIO_ACTIVE_HIGH>
			,<&akdk_d 11 GPIO_ACTIVE_HIGH>
			,<&akdk_d 5 GPIO_ACTIVE_HIGH>
            ;
    };

    trackball_listener: trackball_listener {
        compatible = "zmk,input-listener"; // ZMKのinput-listenerノード。デバイスからの入力イベントを受け取り、指定したプロセッサで処理する役割。
        device = <&trackball>; // どのデバイス（ここではtrackball）からの入力をリッスンするかを指定。
        input-processors = <&zip_temp_layer 3 200 &zip_xy_transform (INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>; // 入力処理プロセッサ。ここではzip_temp_layer（おそらく一時的なレイヤー切り替え等の処理）を指定。引数はプロセッサ固有。
    };

    split_inputs {
        #address-cells = <1>;
        #size-cells = <0>;

        trackball_split: trackball_split@0 {
            compatible = "zmk,input-split"; // ZMKのinput-splitノード。左右分割キーボード間で入力データを転送するための仮想デバイス。
            reg = <0>; // デバイスアドレス。分割通信で一意に識別するため。
        };
    };

    trackball_split_listener: trackball_split_listener {
        compatible = "zmk,input-listener"; // 分割側で受信したtrackball入力を処理するリスナー。
        device = <&trackball_split>; // 分割通信で受信したtrackball入力デバイスを指定。
        status = "okay"; // このノードが有効であることを示す。
        input-processors = <&zip_xy_transform (INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>; // 入力値の変換プロセッサ。ここではX/Y軸の反転処理を行う。
    };
};

&physical_layout0 {
    kscan = <&kscan0>;
    transform = <&default_transform>;
};

&pinctrl {
    spi0_default: spi0_default {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 0, 12)>,
                <NRF_PSEL(SPIM_MOSI, 1, 9)>,
                <NRF_PSEL(SPIM_MISO, 1, 9)>;
        };
    };

    spi0_sleep: spi0_sleep {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 0, 12)>,
                <NRF_PSEL(SPIM_MOSI, 1, 9)>,
                <NRF_PSEL(SPIM_MISO, 1, 9)>;
            low-power-enable;
        };
    };
};

&spi0 {
    status = "okay";
    compatible = "nordic,nrf-spim";
    pinctrl-0 = <&spi0_default>;
    pinctrl-1 = <&spi0_sleep>;
    pinctrl-names = "default", "sleep";
    cs-gpios = <&gpio0 13 GPIO_ACTIVE_LOW>;

    trackball: trackball@0 {
        status = "okay"; // trackballデバイスが有効であることを示す。
        compatible = "pixart,paw3222"; // 使用しているトラックボールIC（PixArt PAW3222）を指定。
        reg = <0>; // SPIバス上のデバイスアドレス。
        spi-max-frequency = <2000000>; // SPI通信の最大周波数（2MHz）。
        irq-gpios = <&gpio0 15 GPIO_ACTIVE_LOW>; // 割り込みピンの指定。trackballからのイベント通知用。
    };
};

